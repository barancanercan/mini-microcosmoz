#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mini Microcosmos - Streamlit UI (Final D√ºzeltilmi≈ü)
Ba≈ülƒ±k problemi ve beyaz alan tamamen √ß√∂z√ºld√º
"""

import json
import os
import asyncio
import sys
import locale
import html
from datetime import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from mcp import ClientSession
from mcp.client.streamable_http import streamablehttp_client

import streamlit as st

# Path setup
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

# Environment deƒüi≈ükenlerini y√ºkle
load_dotenv(dotenv_path='config/.env')

# Streamlit page config - Beyaz bo≈üluk i√ßin optimize edilmi≈ü
st.set_page_config(
    page_title="Mini-Microcosmos",
    page_icon="üé≠",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS'i en √ºste yerle≈ütir - T√ºm sorunlar √ß√∂z√ºld√º
st.markdown("""
<style>
    /* GLOBAL RESET - Her ≈üeyi sƒ±fƒ±rla */
    html, body, div, span, h1, h2, h3, p {
        margin: 0 !important;
        padding: 0 !important;
    }

    /* STREAMLIT APP CONTAINER - Ana konteyner */
    .stApp {
        background-color: #0e1117 !important;
        color: #fafafa !important;
        margin: 0 !important;
        padding: 0 !important;
        top: 0 !important;
    }

    /* STREAMLIT HEADER - Tamamen gizle */
    header[data-testid="stHeader"] {
        height: 0px !important;
        display: none !important;
        visibility: hidden !important;
    }

    /* STREAMLIT TOOLBAR - Tamamen gizle */
    .stToolbar {
        display: none !important;
        visibility: hidden !important;
    }

    /* MAIN CONTAINER - Ana i√ßerik alanƒ± */
    .main .block-container {
        padding: 1rem 1rem 0rem 1rem !important;
        margin-top: 0rem !important;
        max-width: 100% !important;
    }

    /* STREAMLIT VIEW CONTAINER */
    section[data-testid="stSidebar"] {
        display: none !important;
    }

    /* BA≈ûLIK STƒ∞Lƒ∞ - G√∂r√ºn√ºr ba≈ülƒ±k */
    .main-title {
        background: linear-gradient(135deg, #00d4ff 0%, #667eea 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.5rem !important;
        font-weight: bold !important;
        text-align: center !important;
        margin: 0 0 1rem 0 !important;
        padding: 0 !important;
    }

    /* STATUS BAR */
    .status-bar {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        padding: 8px 15px !important;
        border-radius: 10px !important;
        margin: 0 0 1rem 0 !important;
        text-align: center !important;
        border: 1px solid #333 !important;
    }

    /* PERSONA KARTLARI */
    .persona-card {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%) !important;
        color: #fafafa !important;
        padding: 15px !important;
        border-radius: 15px !important;
        margin: 10px 0 !important;
        text-align: center !important;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3) !important;
        border: 1px solid #333 !important;
    }

    .persona-name {
        font-size: 1.3rem !important;
        font-weight: bold !important;
        margin-bottom: 8px !important;
        color: #00d4ff !important;
    }

    .persona-stats {
        display: flex !important;
        justify-content: space-between !important;
        font-size: 0.9rem !important;
        opacity: 0.8 !important;
        color: #ccc !important;
    }

    /* CHAT CONTAINER */
    .chat-container {
        background-color: #1a1a1a !important;
        border-radius: 15px !important;
        padding: 15px !important;
        margin: 10px 0 !important;
        min-height: 400px !important;
        max-height: 500px !important;
        overflow-y: auto !important;
        border: 1px solid #333 !important;
    }

    /* MESAJ BALONLARI */
    .message-bubble {
        padding: 12px 18px !important;
        border-radius: 20px !important;
        margin-bottom: 12px !important;
        max-width: 85% !important;
        word-wrap: break-word !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2) !important;
        line-height: 1.5 !important;
    }

    .user-bubble {
        background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%) !important;
        color: #000 !important;
        margin-left: 15% !important;
        font-weight: 500 !important;
    }

    .assistant-bubble {
        background: linear-gradient(135deg, #333 0%, #555 100%) !important;
        color: #fafafa !important;
        margin-right: 15% !important;
        border: 1px solid #444 !important;
    }

    /* THINKING PROCESS */
    .streamlit-expanderHeader {
        background-color: #262730 !important;
        color: #fafafa !important;
        border: 1px solid #444 !important;
        border-radius: 10px !important;
        margin: 5px 0 !important;
    }

    .streamlit-expanderContent {
        background-color: #1a1a1a !important;
        color: #ccc !important;
        border: 1px solid #333 !important;
        border-top: none !important;
        border-radius: 0 0 10px 10px !important;
        padding: 10px !important;
    }

    /* CHAT INPUT */
    .stChatInput > div {
        background-color: #262730 !important;
        border-radius: 25px !important;
        border: 1px solid #444 !important;
    }

    .stChatInput input {
        background-color: #262730 !important;
        color: #fafafa !important;
        border: none !important;
        border-radius: 25px !important;
    }

    .stChatInput input::placeholder {
        color: #888 !important;
    }

    /* BUTTONS */
    .stButton > button {
        background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%) !important;
        color: #000 !important;
        border: none !important;
        border-radius: 25px !important;
        font-weight: bold !important;
        padding: 8px 20px !important;
        transition: all 0.3s ease !important;
        margin: 5px 0 !important;
    }

    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 12px rgba(0,212,255,0.3) !important;
    }

    /* STATUS INDICATORS */
    .status-success { 
        color: #00ff88 !important; 
        font-weight: bold !important;
    }

    .status-error { 
        color: #ff4444 !important; 
        font-weight: bold !important;
    }

    /* SUCCESS/ERROR MESSAGES */
    .stSuccess {
        background-color: rgba(0, 255, 136, 0.1) !important;
        border: 1px solid #00ff88 !important;
        border-radius: 10px !important;
        color: #00ff88 !important;
    }

    .stError {
        background-color: rgba(255, 68, 68, 0.1) !important;
        border: 1px solid #ff4444 !important;
        border-radius: 10px !important;
        color: #ff4444 !important;
    }

    /* SCROLLBAR */
    ::-webkit-scrollbar {
        width: 8px !important;
    }

    ::-webkit-scrollbar-track {
        background: #1a1a1a !important;
        border-radius: 10px !important;
    }

    ::-webkit-scrollbar-thumb {
        background: #444 !important;
        border-radius: 10px !important;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: #666 !important;
    }

    /* DIVIDER */
    hr {
        border: none !important;
        height: 1px !important;
        background: linear-gradient(90deg, transparent, #333, transparent) !important;
        margin: 1rem 0 !important;
    }

    /* FOOTER */
    .footer-text {
        text-align: center !important;
        color: #888 !important;
        font-size: 0.9rem !important;
        margin: 1rem 0 0 0 !important;
        padding: 0 !important;
    }

    /* HIDE STREAMLIT ELEMENTS */
    #MainMenu, footer, .stActionButton {
        display: none !important;
    }

    /* RESPONSIVE DESIGN */
    @media (max-width: 768px) {
        .main-title {
            font-size: 2rem !important;
        }

        .message-bubble {
            max-width: 95% !important;
        }

        .persona-card {
            margin: 5px 0 !important;
            padding: 10px !important;
        }

        .chat-container {
            min-height: 300px !important;
            max-height: 400px !important;
        }
    }
</style>
""", unsafe_allow_html=True)


# Session state initialization
def init_session_state():
    """Session state'i ba≈ülat"""
    defaults = {
        "tugrul_messages": [],
        "yeni_tugrul_messages": [],
        "tugrul_logs": [],
        "yeni_tugrul_logs": [],
        "processing": False,
        "agents_initialized": False
    }

    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value


# Encoding setup
def setup_encoding():
    """Sistem encoding'ini g√ºvenli ≈üekilde yapƒ±landƒ±r"""
    try:
        locale.setlocale(locale.LC_ALL, 'tr_TR.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'C.UTF-8')
        except:
            pass

    os.environ['PYTHONIOENCODING'] = 'utf-8'


class PersonaAgent:
    def __init__(self, persona_name="tugrul_eski", log_container=None):
        """Persona tabanlƒ± AI agent"""
        setup_encoding()

        self.persona_name = persona_name
        self.log_container = log_container

        # √áoklu Gemini API keys
        self.api_keys = self._load_gemini_keys()
        self.current_api_index = 0

        # Smithery API
        self.smithery_api_key = os.getenv("SMITHERY_API_KEY")
        self.smithery_profile = os.getenv("SMITHERY_PROFILE")

        if not self.smithery_api_key or not self.smithery_profile:
            self.log("‚ö†Ô∏è Web arama devre dƒ±≈üƒ±")

        # Gemini modelini ba≈ülat
        self._initialize_model()

        # Persona'yƒ± y√ºkle
        self.persona = self._load_persona(persona_name)
        self.conversation_history = []

    def _load_gemini_keys(self):
        """Gemini API key'lerini y√ºkle"""
        api_keys = []

        # Ana key
        main_key = os.getenv("GEMINI_API_KEY")
        if main_key:
            api_keys.append(main_key)

        # Numaralƒ± keyler (1-14)
        for i in range(1, 15):
            key = os.getenv(f"GEMINI_API_KEY_{i}")
            if key:
                api_keys.append(key)

        if not api_keys:
            raise ValueError("‚ùå Hi√ßbir GEMINI API key bulunamadƒ±!")

        return api_keys

    def log(self, message, type="info"):
        """Log mesajƒ±nƒ± yaz"""
        log_message = f"[{self.persona_name.upper()}] {message}"
        print(log_message)

        if self.log_container:
            color = {
                "info": "#ccc",
                "success": "#00ff88",
                "warning": "#ffaa00",
                "error": "#ff4444",
                "debug": "#888"
            }.get(type, "#ccc")

            log_key = f"{self.persona_name}_logs"
            if log_key in st.session_state:
                st.session_state[log_key].append(
                    f"<span style=\"color: {color};\">{message}</span>"
                )

    def _initialize_model(self):
        """Gemini modelini ba≈ülat"""
        genai.configure(api_key=self.api_keys[self.current_api_index])
        self.model = genai.GenerativeModel('gemini-1.5-flash')

    def _load_persona(self, persona_name):
        """Persona JSON dosyasƒ±nƒ± y√ºkle"""
        try:
            persona_path = f'src/personas/{persona_name}.json'
            with open(persona_path, 'r', encoding='utf-8') as f:
                persona = json.load(f)
                self.log(f"‚úÖ {persona['name']} y√ºklendi")
                return persona
        except Exception as e:
            self.log(f"‚ùå Persona hatasƒ±: {e}")
            return self._get_fallback_persona(persona_name)

    def _get_fallback_persona(self, persona_name):
        """Fallback persona"""
        return {
            "name": persona_name.replace('_', ' ').title(),
            "bio": ["Test persona"],
            "style": {"chat": ["Normal konu≈üur"]},
            "lore": [""],
            "knowledge": [""]
        }

    def switch_api_key(self):
        """API key'i deƒüi≈ütir"""
        self.current_api_index = (self.current_api_index + 1) % len(self.api_keys)
        self._initialize_model()
        self.log(f"üîÑ API #{self.current_api_index + 1} aktif")

    async def try_with_api_rotation(self, prompt, max_retries=None):
        """API rotasyonu ile g√ºvenli deneme"""
        if max_retries is None:
            max_retries = len(self.api_keys)

        for attempt in range(max_retries):
            try:
                response = await self.model.generate_content_async(prompt)
                return response.text.strip()
            except Exception as e:
                if "429" in str(e) or "quota" in str(e).lower():
                    self.log(f"‚ùå API #{self.current_api_index + 1} quota a≈üƒ±ldƒ±")
                    if attempt < max_retries - 1:
                        self.switch_api_key()
                        continue
                else:
                    raise e

        return "Sistem yoƒüunluƒüu nedeniyle ge√ßici olarak hizmet veremiyorum."

    def create_system_prompt(self):
        """Persona'dan sistem promptu olu≈ütur"""
        bio_text = "\n- ".join(self.persona.get("bio", ["Bilinmiyor"]))
        style_text = "\n- ".join(self.persona.get("style", {}).get("chat", ["Normal konu≈üur"]))
        lore_text = "\n- ".join(self.persona.get("lore", [""])[:10])
        knowledge_text = "\n- ".join(self.persona.get("knowledge", [""])[:6])

        return f"""Sen {self.persona["name"]}'sin.

Bƒ∞OGRAFƒ∞:
- {bio_text}

KONU≈ûMA TARZI:
- {style_text}

HAYATA BAKI≈û:
- {lore_text}

Bƒ∞LGƒ∞N:
- {knowledge_text}

KURALLAR:
- Karakterine uygun davran
- Kƒ±sa ve √∂z cevap ver
- Tartƒ±≈ümacƒ± ve ikna edici ol """

    async def sequential_think(self, prompt: str, stage_name: str):
        """Sequential Thinking adƒ±mƒ±"""
        self.log(f"üß† {stage_name}")

        thinking_prompt = f"""Sen {self.persona['name']}'sin. Kƒ±sa d√º≈ü√ºn:

{prompt}

2-3 c√ºmleyle d√º≈ü√ºnceni s√∂yle:"""

        try:
            result = await self.try_with_api_rotation(thinking_prompt)
            self.log(f"üí≠ {stage_name}: {result[:100]}...")
            return result
        except Exception as e:
            self.log(f"‚ùå {stage_name} hatasƒ±: {e}")
            return "Normal yakla≈üƒ±m benimserim."

    async def search_web_detailed(self, keywords: str):
        """Web aramasƒ±"""
        if not self.smithery_api_key:
            self.log("‚ùå Web arama kapalƒ±")
            return {"analysis": "", "news_summary": ""}

        self.log(f"üîç Web aramasƒ±: {keywords[:50]}...")

        try:
            exa_url = f"https://server.smithery.ai/exa/mcp?api_key={self.smithery_api_key}&profile={self.smithery_profile}"

            async with streamablehttp_client(exa_url) as (read_stream, write_stream, _):
                async with ClientSession(read_stream, write_stream) as session:
                    await session.initialize()

                    # Basit arama
                    result = await session.call_tool("web_search_exa", {
                        "query": keywords,
                        "num_results": 5
                    })

                    if result.content and len(result.content) > 0:
                        search_result = result.content[0].text[:2000]
                        self.log(f"‚úÖ Arama tamamlandƒ±")

                        # Basit analiz
                        analysis = await self.sequential_think(
                            f"Bu haberleri analiz et: {search_result[:500]}",
                            "ANALƒ∞Z"
                        )

                        return {
                            "analysis": analysis,
                            "news_summary": f"G√ºncel haberler: {search_result[:800]}..."
                        }

            return {"analysis": "", "news_summary": ""}

        except Exception as e:
            self.log(f"‚ùå Arama hatasƒ±: {e}")
            return {"analysis": "", "news_summary": ""}

    async def chat(self, user_input: str):
        """Ana sohbet fonksiyonu"""
        self.log(f"üìù Soru: {user_input[:50]}...")

        # Sequential thinking
        question_analysis = await self.sequential_think(
            f"'{user_input}' sorusuna nasƒ±l yakla≈ümalƒ±yƒ±m?",
            "SORU ANALƒ∞Zƒ∞"
        )

        search_decision = await self.sequential_think(
            f"'{user_input}' i√ßin web aramasƒ± gerekli mi?",
            "ARAMA KARARI"
        )

        # Arama gerekli mi?
        search_triggers = ["son", "g√ºncel", "haber", "g√ºndem", "2024", "2025"]
        needs_search = any(trigger in user_input.lower() for trigger in search_triggers)

        analysis = ""
        news_summary = ""

        if needs_search:
            self.log("üéØ Web aramasƒ± yapƒ±lƒ±yor")
            search_terms = await self.sequential_think(
                f"'{user_input}' i√ßin arama terimleri?",
                "ARAMA TERƒ∞MLERƒ∞"
            )

            search_data = await self.search_web_detailed(search_terms.strip())
            analysis = search_data["analysis"]
            news_summary = search_data["news_summary"]

        # Final cevap
        self.log("üí¨ Cevap hazƒ±rlanƒ±yor")

        final_prompt = f"""{self.create_system_prompt()}

G√úNCEL Bƒ∞LGƒ∞:
{news_summary[:800] if news_summary else "Yok"}

ANALƒ∞Z:
{analysis[:500] if analysis else ""}

Kullanƒ±cƒ±: "{user_input}"

Kƒ±sa ve karakter uygun cevap ver:"""

        try:
            response_text = await self.try_with_api_rotation(final_prompt)
            self.log("‚úÖ Cevap hazƒ±r")

            # Ge√ßmi≈üe ekle
            self.conversation_history.append({
                'user': user_input,
                'assistant': response_text
            })

            # Son 2 konu≈üma tut
            if len(self.conversation_history) > 2:
                self.conversation_history = self.conversation_history[-2:]

            return response_text

        except Exception as e:
            self.log(f"‚ùå Hata: {e}")
            return "≈ûu anda teknik sorun ya≈üƒ±yorum, √∂z√ºr dilerim."


# Agent cache
@st.cache_resource
def get_cached_agent(persona_name):
    """Agent'ƒ± cache'le"""
    return PersonaAgent(persona_name=persona_name, log_container=True)


# UI Functions
def display_messages(messages, container):
    """Mesajlarƒ± g√∂r√ºnt√ºle"""
    with container:
        for message in messages:
            if message["role"] == "user":
                st.markdown(f'<div class="message-bubble user-bubble">{html.escape(message["content"])}</div>',
                            unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="message-bubble assistant-bubble">{html.escape(message["content"])}</div>',
                            unsafe_allow_html=True)


def display_thinking_process(logs, container, persona_name):
    """D√º≈ü√ºnce s√ºrecini g√∂r√ºnt√ºle"""
    if logs:
        with container:
            with st.expander("üß† Sequential Thinking Process", expanded=False):
                for log in logs[-10:]:  # Son 10 log
                    st.markdown(log, unsafe_allow_html=True)


# Ana uygulama
def main():
    """Ana uygulama"""
    init_session_state()

    # Ana ba≈ülƒ±k - Ortalanmƒ±≈ü ve stilize edilmi≈ü
    st.markdown('''
    <div class="custom-header">
        <h1>üé≠ Mini-Microcosmos</h1>
        <p>AI Persona Simulator - Sequential Thinking Architecture</p>
    </div>
    ''', unsafe_allow_html=True)

    # API key kontrol√º
    gemini_keys = []
    main_key = os.getenv("GEMINI_API_KEY")
    if main_key:
        gemini_keys.append(main_key)

    for i in range(1, 15):
        key = os.getenv(f"GEMINI_API_KEY_{i}")
        if key:
            gemini_keys.append(key)

    if not gemini_keys:
        st.error("‚ùå GEMINI API KEY bulunamadƒ±!")
        st.info("config/.env dosyasƒ±na API keylerini ekleyin")
        st.stop()
    else:
        st.markdown(f'''
        <div class="status-bar">
            <span class="status-success">‚úÖ {len(gemini_keys)} Gemini API Key aktif</span>
        </div>
        ''', unsafe_allow_html=True)

    # Agent initialization
    if not st.session_state.agents_initialized:
        with st.spinner("ü§ñ Agent'lar y√ºkleniyor..."):
            try:
                st.session_state.tugrul_agent = get_cached_agent("tugrul_eski")
                st.session_state.yeni_tugrul_agent = get_cached_agent("tugrul_yeni")
                st.session_state.agents_initialized = True
                st.success("‚úÖ Agent'lar hazƒ±r!")
            except Exception as e:
                st.error(f"‚ùå Agent hatasƒ±: {e}")
                st.stop()

    # ƒ∞ki s√ºtun
    col1, col2 = st.columns(2)

    # Sol s√ºtun - Eski Tuƒürul
    with col1:
        st.markdown('''
        <div class="persona-card">
            <div class="persona-name">üéØ Eski Tuƒürul</div>
            <div class="persona-stats">
                <span>Eski Milliyet√ßi Persona</span>
                <span>Milliyet√ßi</span>
            </div>
        </div>
        ''', unsafe_allow_html=True)

        # Thinking process
        thinking_container1 = st.container()
        display_thinking_process(st.session_state.tugrul_logs, thinking_container1, "tugrul")

        # Messages
        message_container1 = st.container()
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        display_messages(st.session_state.tugrul_messages, message_container1)
        st.markdown('</div>', unsafe_allow_html=True)

    # Saƒü s√ºtun - Yeni Tuƒürul
    with col2:
        st.markdown('''
        <div class="persona-card">
            <div class="persona-name">üîÑ Yeni Tuƒürul</div>
            <div class="persona-stats">
                <span>Yeni Milliyet√ßi - CHP Ge√ßi≈ü</span>
                <span>Deƒüi≈üen Profil</span>
            </div>
        </div>
        ''', unsafe_allow_html=True)

        # Thinking process
        thinking_container2 = st.container()
        display_thinking_process(st.session_state.yeni_tugrul_logs, thinking_container2, "yeni_tugrul")

        # Messages
        message_container2 = st.container()
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        display_messages(st.session_state.yeni_tugrul_messages, message_container2)
        st.markdown('</div>', unsafe_allow_html=True)

    # Chat input
    st.markdown("<hr>", unsafe_allow_html=True)

    if prompt := st.chat_input("üé≠ Tuƒürullara bir ≈üey sor..."):
        if not st.session_state.processing:
            st.session_state.processing = True

            # Clear logs
            st.session_state.tugrul_logs = []
            st.session_state.yeni_tugrul_logs = []

            # Add user message
            user_message = {"role": "user", "content": prompt}
            st.session_state.tugrul_messages.append(user_message)
            st.session_state.yeni_tugrul_messages.append(user_message)

            async def process_agents():
                """Agent'larƒ± √ßalƒ±≈ütƒ±r"""
                try:
                    # Paralel √ßalƒ±≈üma
                    tugrul_task = st.session_state.tugrul_agent.chat(prompt)
                    yeni_tugrul_task = st.session_state.yeni_tugrul_agent.chat(prompt)

                    tugrul_response, yeni_tugrul_response = await asyncio.gather(
                        tugrul_task, yeni_tugrul_task
                    )

                    # Cevaplarƒ± ekle
                    st.session_state.tugrul_messages.append({
                        "role": "assistant",
                        "content": tugrul_response
                    })
                    st.session_state.yeni_tugrul_messages.append({
                        "role": "assistant",
                        "content": yeni_tugrul_response
                    })

                except Exception as e:
                    st.error(f"‚ùå Agent hatasƒ±: {e}")
                finally:
                    st.session_state.processing = False

            # Run async
            with st.spinner("üß† Sequential Thinking..."):
                asyncio.run(process_agents())
                st.rerun()

    # Control panel
    st.markdown("<hr>", unsafe_allow_html=True)
    control_col1, control_col2 = st.columns(2)

    with control_col1:
        if st.button("üóëÔ∏è Sohbeti Temizle"):
            st.session_state.tugrul_messages = []
            st.session_state.yeni_tugrul_messages = []
            st.session_state.tugrul_logs = []
            st.session_state.yeni_tugrul_logs = []
            st.rerun()

    with control_col2:
        if st.button("üîÑ API Deƒüi≈ütir"):
            if st.session_state.agents_initialized:
                st.session_state.tugrul_agent.switch_api_key()
                st.session_state.yeni_tugrul_agent.switch_api_key()
                st.success("üîÑ API deƒüi≈ütirildi!")

    # Footer
    st.markdown('<p class="footer-text"><strong>üé≠ Mini Microcosmos</strong> - AI Persona Simulator - developed by Baran Can Ercan with <3 üé≠ </p>',
                unsafe_allow_html=True)


if __name__ == "__main__":
    main()